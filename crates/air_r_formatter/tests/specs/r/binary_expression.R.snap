---
source: crates/air_formatter_test/src/snapshot_builder.rs
info: r/binary_expression.R
---
# Input

```R
1 + 2 + 3 + 4

argument_that_is_quite_long + argument_that_is_quite_long + argument_that_is_quite_long + argument_that_is_quite_long

1 + 2^3 + 4

argument_that_is_quite_long + argument_that_is_quite_long^argument_that_is_quite_long + argument_that_is_quite_long

1 + # comment
  2

1 +

  # comment1

  2 # comment2

# The following expressions should have spaces
1 ~ 2
1 <- 2
1 <<- 2
1 := 2
1 -> 2
1 ->> 2
1 = 2
1 | 2
1 & 2
1 || 2
1 && 2
1 < 2
1 <= 2
1 > 2
1 >= 2
1 == 2
1 != 2
1 + 2
1 - 2
1 * 2
1 / 2
1 |> 2
1 %>% 2

# The following expressions should not have spaces
1 ? 2
1 ** 2
1 ^ 2
1 : 2

# The following assignments should start the LHS/RHS on the same
# line as the operator
fn = function(x) {
  x
}
fn <- function(x) {
  x
}
fn <<- function(x) {
  x
}

identity(1) -> x
identity(1) ->> x

# -----------------------------------------------------------------------------
# Help specific

alias?"^try"
alias??"^try"
alias???"^try"
# Contact the oracle :)
alias????"^try"

# -----------------------------------------------------------------------------
# Precedence with formulas and other binary operators

a ~ b

# User requested line break
a ~
	b

# `b + c` is kept together. Precedence groups this as `(a) ~ (b + c)`,
# so the LHS of `~` doesn't contain another binary operator to chain to.
a ~
	b + c

# The two formulas are chained, but `c + d` stays together
a ~
	b ~ c + d

# -----------------------------------------------------------------------------
# Binary expression conditionals in if statements

# It fits, nothing to do
if (long_conditional1 && long_conditional2) {
  1 + 1
}

# User requested break
if (long_conditional1
&& long_conditional2) {
  1 + 1
}

# User requested break, parentheses prevent further splitting
if (long_conditional1
&& (long_conditional2 || long_conditional3)) {
  1 + 1
}

if (long_conditional1 && long_conditional2 && long_conditional3 && long_conditional4 && long_conditional5) {
  1 + 1
}

```


=============================

# Outputs

## Output 1

-----
Indent style: Tab
Indent width: 2
Line ending: LF
Line width: 80
-----

```R
1 + 2 + 3 + 4

argument_that_is_quite_long +
	argument_that_is_quite_long +
	argument_that_is_quite_long +
	argument_that_is_quite_long

1 + 2^3 + 4

argument_that_is_quite_long +
	argument_that_is_quite_long^argument_that_is_quite_long +
	argument_that_is_quite_long

1 + # comment
	2

1 +

	# comment1

	2 # comment2

# The following expressions should have spaces
1 ~ 2
1 <- 2
1 <<- 2
1 := 2
1 -> 2
1 ->> 2
1 = 2
1 | 2
1 & 2
1 || 2
1 && 2
1 < 2
1 <= 2
1 > 2
1 >= 2
1 == 2
1 != 2
1 + 2
1 - 2
1 * 2
1 / 2
1 |> 2
1 %>% 2

# The following expressions should not have spaces
1?2
1**2
1^2
1:2

# The following assignments should start the LHS/RHS on the same
# line as the operator
fn = function(x) {
	x
}
fn <- function(x) {
	x
}
fn <<- function(x) {
	x
}

identity(1) -> x
identity(1) ->> x

# -----------------------------------------------------------------------------
# Help specific

alias?"^try"
alias??"^try"
alias???"^try"
# Contact the oracle :)
alias????"^try"

# -----------------------------------------------------------------------------
# Precedence with formulas and other binary operators

a ~ b

# User requested line break
a ~
	b

# `b + c` is kept together. Precedence groups this as `(a) ~ (b + c)`,
# so the LHS of `~` doesn't contain another binary operator to chain to.
a ~
	b + c

# The two formulas are chained, but `c + d` stays together
a ~
	b ~
	c + d

# -----------------------------------------------------------------------------
# Binary expression conditionals in if statements

# It fits, nothing to do
if (long_conditional1 && long_conditional2) {
	1 + 1
}

# User requested break
if (
	long_conditional1 &&
		long_conditional2
) {
	1 + 1
}

# User requested break, parentheses prevent further splitting
if (
	long_conditional1 &&
		(long_conditional2 || long_conditional3)
) {
	1 + 1
}

if (
	long_conditional1 &&
		long_conditional2 &&
		long_conditional3 &&
		long_conditional4 &&
		long_conditional5
) {
	1 + 1
}
```
