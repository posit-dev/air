---
source: crates/air_formatter_test/src/snapshot_builder.rs
info: r/function_definition.R
---
# Input

```R
function() 1
function(a, b) 1

function(a_really_long_argument_name_to_break_on, and_here_is_another_one_please_break_me, and_this) 1

function(a_really_long_argument_name_to_break_on, and_this) a_really_long_argument_name_to_break_on

function(a = {
  1
}, b) {
  1
}

function() {
  # comment
}

function() # becomes leading on `1 + 1`
{
  1 + 1
}

function() # becomes leading on `1 + 1`
{
  # an inner comment
  1 + 1
}

function() # becomes dangling on the `{}`
{
}

function() # becomes dangling on the `{}`
{
  # an inner comment but empty `{}`
}

function() # becomes leading on `1 + 1`
  1 + 1

\(x, y) 1

# ------------------------------------------------------------------------
# User requested line break

# A line break before the first parameter forces expansion

# So this function definition stays expanded even though it fits on one line
fn <- function(
  a,
  b
) {
  body
}

# This flattens to one line
fn <- function(a,
  b
) {
  body
}

# This flattens to one line
fn <- function(a, b
) {
  body
}

# Expansion doesn't propagate to the `c(1, 2, 3)`
fn <- function(
  a,
  b = c(1, 2, 3)
) {
  body
}

# Dots - this expands
fn <- function(
  ..., a, b
) {
  body
}

# Dots - this flattens
fn <- function(...,
  a, b
) {
  body
}

# User requested expansion of the `c()` call forces expansion of
# the entire function definition
fn <- function(a, b = c(
  1, 2, 3)) {
  body
}

# ------------------------------------------------------------------------
# User requested line break and trailing anonymous functions in calls

# Ensure these features play nicely together

# This user line break expands the function definition, causing the whole
# `map()` to expand
map(xs, function(
  x, option = "a") {
  x
})

# This flattens the function definition, but the `map()` stays expanded
map(
  xs,
  function(x,
    option = "a"
  ) {
    x
  }
)

# This flattens to one line
map(xs, function(x,
  option = "a") {
  x
})

```


=============================

# Outputs

## Output 1

-----
Indent style: Space
Indent width: 2
Line ending: LF
Line width: 80
Persistent line breaks: Respect
Skip: None
-----

```R
function() 1
function(a, b) 1

function(
  a_really_long_argument_name_to_break_on,
  and_here_is_another_one_please_break_me,
  and_this
) 1

function(a_really_long_argument_name_to_break_on, and_this)
  a_really_long_argument_name_to_break_on

function(
  a = {
    1
  },
  b
) {
  1
}

function() {
  # comment
}

function() {
  # becomes leading on `1 + 1`
  1 + 1
}

function() {
  # becomes leading on `1 + 1`
  # an inner comment
  1 + 1
}

function() {
  # becomes dangling on the `{}`
}

function() {
  # becomes dangling on the `{}`
  # an inner comment but empty `{}`
}

function()
  # becomes leading on `1 + 1`
  1 + 1

\(x, y) 1

# ------------------------------------------------------------------------
# User requested line break

# A line break before the first parameter forces expansion

# So this function definition stays expanded even though it fits on one line
fn <- function(
  a,
  b
) {
  body
}

# This flattens to one line
fn <- function(a, b) {
  body
}

# This flattens to one line
fn <- function(a, b) {
  body
}

# Expansion doesn't propagate to the `c(1, 2, 3)`
fn <- function(
  a,
  b = c(1, 2, 3)
) {
  body
}

# Dots - this expands
fn <- function(
  ...,
  a,
  b
) {
  body
}

# Dots - this flattens
fn <- function(..., a, b) {
  body
}

# User requested expansion of the `c()` call forces expansion of
# the entire function definition
fn <- function(
  a,
  b = c(
    1,
    2,
    3
  )
) {
  body
}

# ------------------------------------------------------------------------
# User requested line break and trailing anonymous functions in calls

# Ensure these features play nicely together

# This user line break expands the function definition, causing the whole
# `map()` to expand
map(
  xs,
  function(
    x,
    option = "a"
  ) {
    x
  }
)

# This flattens the function definition, but the `map()` stays expanded
map(
  xs,
  function(x, option = "a") {
    x
  }
)

# This flattens to one line
map(xs, function(x, option = "a") {
  x
})
```
