---
source: crates/air_r_parser/tests/spec_test.rs
expression: snapshot
---
## Input

```R
{ }

{

}

{ 1 }

{
  1
  2 + 2
  3 +
    4
}

# comment1
{ # comment2
  1 # comment3
} # comment4

```


## AST

```
RRoot {
    bom_token: missing (optional),
    expressions: RExpressionList [
        RBracedExpressions {
            l_curly_token: L_CURLY@0..1 "{" [] [],
            expressions: RExpressionList [],
            r_curly_token: R_CURLY@1..3 "}" [Whitespace(" ")] [],
        },
        RBracedExpressions {
            l_curly_token: L_CURLY@3..6 "{" [Newline("\n"), Newline("\n")] [],
            expressions: RExpressionList [],
            r_curly_token: R_CURLY@6..9 "}" [Newline("\n"), Newline("\n")] [],
        },
        RBracedExpressions {
            l_curly_token: L_CURLY@9..12 "{" [Newline("\n"), Newline("\n")] [],
            expressions: RExpressionList [
                RDoubleValue {
                    value_token: R_DOUBLE_LITERAL@12..14 "1" [Whitespace(" ")] [],
                },
            ],
            r_curly_token: R_CURLY@14..16 "}" [Whitespace(" ")] [],
        },
        RBracedExpressions {
            l_curly_token: L_CURLY@16..19 "{" [Newline("\n"), Newline("\n")] [],
            expressions: RExpressionList [
                RDoubleValue {
                    value_token: R_DOUBLE_LITERAL@19..23 "1" [Newline("\n"), Whitespace("  ")] [],
                },
                RBinaryExpression {
                    left: RDoubleValue {
                        value_token: R_DOUBLE_LITERAL@23..27 "2" [Newline("\n"), Whitespace("  ")] [],
                    },
                    operator: PLUS@27..29 "+" [Whitespace(" ")] [],
                    right: RDoubleValue {
                        value_token: R_DOUBLE_LITERAL@29..31 "2" [Whitespace(" ")] [],
                    },
                },
                RBinaryExpression {
                    left: RDoubleValue {
                        value_token: R_DOUBLE_LITERAL@31..35 "3" [Newline("\n"), Whitespace("  ")] [],
                    },
                    operator: PLUS@35..37 "+" [Whitespace(" ")] [],
                    right: RDoubleValue {
                        value_token: R_DOUBLE_LITERAL@37..43 "4" [Newline("\n"), Whitespace("    ")] [],
                    },
                },
            ],
            r_curly_token: R_CURLY@43..45 "}" [Newline("\n")] [],
        },
        RBracedExpressions {
            l_curly_token: L_CURLY@45..70 "{" [Newline("\n"), Newline("\n"), Comments("# comment1"), Newline("\n")] [Whitespace(" "), Comments("# comment2")],
            expressions: RExpressionList [
                RDoubleValue {
                    value_token: R_DOUBLE_LITERAL@70..85 "1" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment3")],
                },
            ],
            r_curly_token: R_CURLY@85..98 "}" [Newline("\n")] [Whitespace(" "), Comments("# comment4")],
        },
    ],
    eof_token: EOF@98..99 "" [Newline("\n")] [],
}
```

## CST

```
0: R_ROOT@0..99
  0: (empty)
  1: R_EXPRESSION_LIST@0..98
    0: R_BRACED_EXPRESSIONS@0..3
      0: L_CURLY@0..1 "{" [] []
      1: R_EXPRESSION_LIST@1..1
      2: R_CURLY@1..3 "}" [Whitespace(" ")] []
    1: R_BRACED_EXPRESSIONS@3..9
      0: L_CURLY@3..6 "{" [Newline("\n"), Newline("\n")] []
      1: R_EXPRESSION_LIST@6..6
      2: R_CURLY@6..9 "}" [Newline("\n"), Newline("\n")] []
    2: R_BRACED_EXPRESSIONS@9..16
      0: L_CURLY@9..12 "{" [Newline("\n"), Newline("\n")] []
      1: R_EXPRESSION_LIST@12..14
        0: R_DOUBLE_VALUE@12..14
          0: R_DOUBLE_LITERAL@12..14 "1" [Whitespace(" ")] []
      2: R_CURLY@14..16 "}" [Whitespace(" ")] []
    3: R_BRACED_EXPRESSIONS@16..45
      0: L_CURLY@16..19 "{" [Newline("\n"), Newline("\n")] []
      1: R_EXPRESSION_LIST@19..43
        0: R_DOUBLE_VALUE@19..23
          0: R_DOUBLE_LITERAL@19..23 "1" [Newline("\n"), Whitespace("  ")] []
        1: R_BINARY_EXPRESSION@23..31
          0: R_DOUBLE_VALUE@23..27
            0: R_DOUBLE_LITERAL@23..27 "2" [Newline("\n"), Whitespace("  ")] []
          1: PLUS@27..29 "+" [Whitespace(" ")] []
          2: R_DOUBLE_VALUE@29..31
            0: R_DOUBLE_LITERAL@29..31 "2" [Whitespace(" ")] []
        2: R_BINARY_EXPRESSION@31..43
          0: R_DOUBLE_VALUE@31..35
            0: R_DOUBLE_LITERAL@31..35 "3" [Newline("\n"), Whitespace("  ")] []
          1: PLUS@35..37 "+" [Whitespace(" ")] []
          2: R_DOUBLE_VALUE@37..43
            0: R_DOUBLE_LITERAL@37..43 "4" [Newline("\n"), Whitespace("    ")] []
      2: R_CURLY@43..45 "}" [Newline("\n")] []
    4: R_BRACED_EXPRESSIONS@45..98
      0: L_CURLY@45..70 "{" [Newline("\n"), Newline("\n"), Comments("# comment1"), Newline("\n")] [Whitespace(" "), Comments("# comment2")]
      1: R_EXPRESSION_LIST@70..85
        0: R_DOUBLE_VALUE@70..85
          0: R_DOUBLE_LITERAL@70..85 "1" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment3")]
      2: R_CURLY@85..98 "}" [Newline("\n")] [Whitespace(" "), Comments("# comment4")]
  2: EOF@98..99 "" [Newline("\n")] []

```
