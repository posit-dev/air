---
source: crates/air_r_parser/tests/spec_test.rs
expression: snapshot
---
## Input

```R
..1
..2
..10

function(...) {
  ..1 + ..2
}

# Parses as a function
..1()

```


## AST

```
RRoot {
    bom_token: missing (optional),
    expressions: RExpressionList [
        RDotDotI {
            value_token: DOTDOTI@0..3 "..1" [] [],
        },
        RDotDotI {
            value_token: DOTDOTI@3..7 "..2" [Newline("\n")] [],
        },
        RDotDotI {
            value_token: DOTDOTI@7..12 "..10" [Newline("\n")] [],
        },
        RFunctionDefinition {
            name: FUNCTION_KW@12..22 "function" [Newline("\n"), Newline("\n")] [],
            parameters: RParameters {
                l_paren_token: L_PAREN@22..23 "(" [] [],
                items: RParameterList [
                    RParameter {
                        name: RDots {
                            value_token: DOTS@23..26 "..." [] [],
                        },
                        default: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@26..27 ")" [] [],
            },
            body: RBracedExpressions {
                l_curly_token: L_CURLY@27..29 "{" [Whitespace(" ")] [],
                expressions: RExpressionList [
                    RBinaryExpression {
                        left: RDotDotI {
                            value_token: DOTDOTI@29..35 "..1" [Newline("\n"), Whitespace("  ")] [],
                        },
                        operator: PLUS@35..37 "+" [Whitespace(" ")] [],
                        right: RDotDotI {
                            value_token: DOTDOTI@37..41 "..2" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_curly_token: R_CURLY@41..43 "}" [Newline("\n")] [],
            },
        },
        RCall {
            function: RDotDotI {
                value_token: DOTDOTI@43..71 "..1" [Newline("\n"), Newline("\n"), Comments("# Parses as a function"), Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@71..72 "(" [] [],
                items: RArgumentList [],
                r_paren_token: R_PAREN@72..73 ")" [] [],
            },
        },
    ],
    eof_token: EOF@73..74 "" [Newline("\n")] [],
}
```

## CST

```
0: R_ROOT@0..74
  0: (empty)
  1: R_EXPRESSION_LIST@0..73
    0: R_DOT_DOT_I@0..3
      0: DOTDOTI@0..3 "..1" [] []
    1: R_DOT_DOT_I@3..7
      0: DOTDOTI@3..7 "..2" [Newline("\n")] []
    2: R_DOT_DOT_I@7..12
      0: DOTDOTI@7..12 "..10" [Newline("\n")] []
    3: R_FUNCTION_DEFINITION@12..43
      0: FUNCTION_KW@12..22 "function" [Newline("\n"), Newline("\n")] []
      1: R_PARAMETERS@22..27
        0: L_PAREN@22..23 "(" [] []
        1: R_PARAMETER_LIST@23..26
          0: R_PARAMETER@23..26
            0: R_DOTS@23..26
              0: DOTS@23..26 "..." [] []
            1: (empty)
        2: R_PAREN@26..27 ")" [] []
      2: R_BRACED_EXPRESSIONS@27..43
        0: L_CURLY@27..29 "{" [Whitespace(" ")] []
        1: R_EXPRESSION_LIST@29..41
          0: R_BINARY_EXPRESSION@29..41
            0: R_DOT_DOT_I@29..35
              0: DOTDOTI@29..35 "..1" [Newline("\n"), Whitespace("  ")] []
            1: PLUS@35..37 "+" [Whitespace(" ")] []
            2: R_DOT_DOT_I@37..41
              0: DOTDOTI@37..41 "..2" [Whitespace(" ")] []
        2: R_CURLY@41..43 "}" [Newline("\n")] []
    4: R_CALL@43..73
      0: R_DOT_DOT_I@43..71
        0: DOTDOTI@43..71 "..1" [Newline("\n"), Newline("\n"), Comments("# Parses as a function"), Newline("\n")] []
      1: R_CALL_ARGUMENTS@71..73
        0: L_PAREN@71..72 "(" [] []
        1: R_ARGUMENT_LIST@72..72
        2: R_PAREN@72..73 ")" [] []
  2: EOF@73..74 "" [Newline("\n")] []

```
