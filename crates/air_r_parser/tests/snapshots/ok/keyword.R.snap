---
source: crates/air_r_parser/tests/spec_test.rs
expression: snapshot
---
## Input

```R
return
break
next
TRUE
FALSE
NULL
Inf
NaN
NA
NA_integer_
NA_real_
NA_complex_
NA_character_

```


## AST

```
RRoot {
    bom_token: missing (optional),
    expressions: RExpressionList [
        RReturnExpression {
            return_token: RETURN_KW@0..6 "return" [] [],
        },
        RBreakExpression {
            break_token: BREAK_KW@6..12 "break" [Newline("\n")] [],
        },
        RNextExpression {
            next_token: NEXT_KW@12..17 "next" [Newline("\n")] [],
        },
        RTrueExpression {
            true_token: TRUE_KW@17..22 "TRUE" [Newline("\n")] [],
        },
        RFalseExpression {
            false_token: FALSE_KW@22..28 "FALSE" [Newline("\n")] [],
        },
        RNullExpression {
            null_token: NULL_KW@28..33 "NULL" [Newline("\n")] [],
        },
        RInfExpression {
            inf_token: INF_KW@33..37 "Inf" [Newline("\n")] [],
        },
        RNanExpression {
            nan_token: NAN_KW@37..41 "NaN" [Newline("\n")] [],
        },
        RNaExpression {
            value: NA_LOGICAL_KW@41..44 "NA" [Newline("\n")] [],
        },
        RNaExpression {
            value: NA_INTEGER_KW@44..56 "NA_integer_" [Newline("\n")] [],
        },
        RNaExpression {
            value: NA_DOUBLE_KW@56..65 "NA_real_" [Newline("\n")] [],
        },
        RNaExpression {
            value: NA_COMPLEX_KW@65..77 "NA_complex_" [Newline("\n")] [],
        },
        RNaExpression {
            value: NA_CHARACTER_KW@77..91 "NA_character_" [Newline("\n")] [],
        },
    ],
    eof_token: EOF@91..92 "" [Newline("\n")] [],
}
```

## CST

```
0: R_ROOT@0..92
  0: (empty)
  1: R_EXPRESSION_LIST@0..91
    0: R_RETURN_EXPRESSION@0..6
      0: RETURN_KW@0..6 "return" [] []
    1: R_BREAK_EXPRESSION@6..12
      0: BREAK_KW@6..12 "break" [Newline("\n")] []
    2: R_NEXT_EXPRESSION@12..17
      0: NEXT_KW@12..17 "next" [Newline("\n")] []
    3: R_TRUE_EXPRESSION@17..22
      0: TRUE_KW@17..22 "TRUE" [Newline("\n")] []
    4: R_FALSE_EXPRESSION@22..28
      0: FALSE_KW@22..28 "FALSE" [Newline("\n")] []
    5: R_NULL_EXPRESSION@28..33
      0: NULL_KW@28..33 "NULL" [Newline("\n")] []
    6: R_INF_EXPRESSION@33..37
      0: INF_KW@33..37 "Inf" [Newline("\n")] []
    7: R_NAN_EXPRESSION@37..41
      0: NAN_KW@37..41 "NaN" [Newline("\n")] []
    8: R_NA_EXPRESSION@41..44
      0: NA_LOGICAL_KW@41..44 "NA" [Newline("\n")] []
    9: R_NA_EXPRESSION@44..56
      0: NA_INTEGER_KW@44..56 "NA_integer_" [Newline("\n")] []
    10: R_NA_EXPRESSION@56..65
      0: NA_DOUBLE_KW@56..65 "NA_real_" [Newline("\n")] []
    11: R_NA_EXPRESSION@65..77
      0: NA_COMPLEX_KW@65..77 "NA_complex_" [Newline("\n")] []
    12: R_NA_EXPRESSION@77..91
      0: NA_CHARACTER_KW@77..91 "NA_character_" [Newline("\n")] []
  2: EOF@91..92 "" [Newline("\n")] []

```
