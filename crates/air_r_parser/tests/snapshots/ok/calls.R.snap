---
source: crates/air_r_parser/tests/spec_test.rs
expression: snapshot
---
## Input

```R
fn()
fn(a)
fn(a, b)
fn(...)
fn(a, ..., b)

fn(a = 1)
fn(a = )

fn(a = 1, b = 2)
fn(a = , b = 2)

fn(... = 1)
fn(... =)

fn(..1 = 2)
fn(..1 =)

fn("arg" = 1)
fn("arg" =)

# Comma tests
fn(,)
fn(,,,)
fn(,,a,,b,,)

# Comment tests
fn(
  # comment
)
fn(,
  # comment
,)
fn(
  a, # comment1
  b # comment2
)
fn(
  a # comment1
  = # comment2
  1 # comment3
)

{expr}(a = 1)

# `NULL` argument name (r-lib/tree-sitter-r#164)
fn(
  NULL = 1
)
fn(
  NULL = 
)
fn(
  NULL = ,
)
```


## AST

```
RRoot {
    bom_token: missing (optional),
    expressions: RExpressionList [
        RCall {
            function: RIdentifier {
                name_token: IDENT@0..2 "fn" [] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@2..3 "(" [] [],
                items: RArgumentList [],
                r_paren_token: R_PAREN@3..4 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@4..7 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@7..8 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: missing (optional),
                        value: RIdentifier {
                            name_token: IDENT@8..9 "a" [] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@9..10 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@10..13 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@13..14 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: missing (optional),
                        value: RIdentifier {
                            name_token: IDENT@14..15 "a" [] [],
                        },
                    },
                    COMMA@15..16 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: RIdentifier {
                            name_token: IDENT@16..18 "b" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@18..19 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@19..22 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@22..23 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: missing (optional),
                        value: RDots {
                            value_token: DOTS@23..26 "..." [] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@26..27 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@27..30 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@30..31 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: missing (optional),
                        value: RIdentifier {
                            name_token: IDENT@31..32 "a" [] [],
                        },
                    },
                    COMMA@32..33 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: RDots {
                            value_token: DOTS@33..37 "..." [Whitespace(" ")] [],
                        },
                    },
                    COMMA@37..38 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: RIdentifier {
                            name_token: IDENT@38..40 "b" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@40..41 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@41..45 "fn" [Newline("\n"), Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@45..46 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RIdentifier {
                                name_token: IDENT@46..47 "a" [] [],
                            },
                            eq_token: EQUAL@47..49 "=" [Whitespace(" ")] [],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@49..51 "1" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@51..52 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@52..55 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@55..56 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RIdentifier {
                                name_token: IDENT@56..57 "a" [] [],
                            },
                            eq_token: EQUAL@57..59 "=" [Whitespace(" ")] [],
                        },
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@59..61 ")" [Whitespace(" ")] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@61..65 "fn" [Newline("\n"), Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@65..66 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RIdentifier {
                                name_token: IDENT@66..67 "a" [] [],
                            },
                            eq_token: EQUAL@67..69 "=" [Whitespace(" ")] [],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@69..71 "1" [Whitespace(" ")] [],
                        },
                    },
                    COMMA@71..72 "," [] [],
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RIdentifier {
                                name_token: IDENT@72..74 "b" [Whitespace(" ")] [],
                            },
                            eq_token: EQUAL@74..76 "=" [Whitespace(" ")] [],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@76..78 "2" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@78..79 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@79..82 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@82..83 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RIdentifier {
                                name_token: IDENT@83..84 "a" [] [],
                            },
                            eq_token: EQUAL@84..86 "=" [Whitespace(" ")] [],
                        },
                        value: missing (optional),
                    },
                    COMMA@86..88 "," [Whitespace(" ")] [],
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RIdentifier {
                                name_token: IDENT@88..90 "b" [Whitespace(" ")] [],
                            },
                            eq_token: EQUAL@90..92 "=" [Whitespace(" ")] [],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@92..94 "2" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@94..95 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@95..99 "fn" [Newline("\n"), Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@99..100 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RDots {
                                value_token: DOTS@100..103 "..." [] [],
                            },
                            eq_token: EQUAL@103..105 "=" [Whitespace(" ")] [],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@105..107 "1" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@107..108 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@108..111 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@111..112 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RDots {
                                value_token: DOTS@112..115 "..." [] [],
                            },
                            eq_token: EQUAL@115..117 "=" [Whitespace(" ")] [],
                        },
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@117..118 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@118..122 "fn" [Newline("\n"), Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@122..123 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RDotDotI {
                                value_token: DOTDOTI@123..126 "..1" [] [],
                            },
                            eq_token: EQUAL@126..128 "=" [Whitespace(" ")] [],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@128..130 "2" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@130..131 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@131..134 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@134..135 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RDotDotI {
                                value_token: DOTDOTI@135..138 "..1" [] [],
                            },
                            eq_token: EQUAL@138..140 "=" [Whitespace(" ")] [],
                        },
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@140..141 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@141..145 "fn" [Newline("\n"), Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@145..146 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RStringValue {
                                value_token: R_STRING_LITERAL@146..151 "\"arg\"" [] [],
                            },
                            eq_token: EQUAL@151..153 "=" [Whitespace(" ")] [],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@153..155 "1" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@155..156 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@156..159 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@159..160 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RStringValue {
                                value_token: R_STRING_LITERAL@160..165 "\"arg\"" [] [],
                            },
                            eq_token: EQUAL@165..167 "=" [Whitespace(" ")] [],
                        },
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@167..168 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@168..186 "fn" [Newline("\n"), Newline("\n"), Comments("# Comma tests"), Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@186..187 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@187..188 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@188..189 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@189..192 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@192..193 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@193..194 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@194..195 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@195..196 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@196..197 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@197..200 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@200..201 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@201..202 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@202..203 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: RIdentifier {
                            name_token: IDENT@203..204 "a" [] [],
                        },
                    },
                    COMMA@204..205 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@205..206 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: RIdentifier {
                            name_token: IDENT@206..207 "b" [] [],
                        },
                    },
                    COMMA@207..208 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@208..209 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@209..210 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@210..230 "fn" [Newline("\n"), Newline("\n"), Comments("# Comment tests"), Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@230..231 "(" [] [],
                items: RArgumentList [],
                r_paren_token: R_PAREN@231..245 ")" [Newline("\n"), Whitespace("  "), Comments("# comment"), Newline("\n")] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@245..248 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@248..249 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@249..250 "," [] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                    COMMA@250..264 "," [Newline("\n"), Whitespace("  "), Comments("# comment"), Newline("\n")] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@264..265 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@265..268 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@268..269 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: missing (optional),
                        value: RIdentifier {
                            name_token: IDENT@269..273 "a" [Newline("\n"), Whitespace("  ")] [],
                        },
                    },
                    COMMA@273..285 "," [] [Whitespace(" "), Comments("# comment1")],
                    RArgument {
                        name_clause: missing (optional),
                        value: RIdentifier {
                            name_token: IDENT@285..300 "b" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment2")],
                        },
                    },
                ],
                r_paren_token: R_PAREN@300..302 ")" [Newline("\n")] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@302..305 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@305..306 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RIdentifier {
                                name_token: IDENT@306..321 "a" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment1")],
                            },
                            eq_token: EQUAL@321..336 "=" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment2")],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@336..351 "1" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment3")],
                        },
                    },
                ],
                r_paren_token: R_PAREN@351..353 ")" [Newline("\n")] [],
            },
        },
        RCall {
            function: RBracedExpressions {
                l_curly_token: L_CURLY@353..356 "{" [Newline("\n"), Newline("\n")] [],
                expressions: RExpressionList [
                    RIdentifier {
                        name_token: IDENT@356..360 "expr" [] [],
                    },
                ],
                r_curly_token: R_CURLY@360..361 "}" [] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@361..362 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RIdentifier {
                                name_token: IDENT@362..363 "a" [] [],
                            },
                            eq_token: EQUAL@363..365 "=" [Whitespace(" ")] [],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@365..367 "1" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@367..368 ")" [] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@368..421 "fn" [Newline("\n"), Newline("\n"), Comments("# `NULL` argument nam ..."), Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@421..422 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RNullExpression {
                                null_token: NULL_KW@422..429 "NULL" [Newline("\n"), Whitespace("  ")] [],
                            },
                            eq_token: EQUAL@429..431 "=" [Whitespace(" ")] [],
                        },
                        value: RDoubleValue {
                            value_token: R_DOUBLE_LITERAL@431..433 "1" [Whitespace(" ")] [],
                        },
                    },
                ],
                r_paren_token: R_PAREN@433..435 ")" [Newline("\n")] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@435..438 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@438..439 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RNullExpression {
                                null_token: NULL_KW@439..446 "NULL" [Newline("\n"), Whitespace("  ")] [],
                            },
                            eq_token: EQUAL@446..449 "=" [Whitespace(" ")] [Whitespace(" ")],
                        },
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@449..451 ")" [Newline("\n")] [],
            },
        },
        RCall {
            function: RIdentifier {
                name_token: IDENT@451..454 "fn" [Newline("\n")] [],
            },
            arguments: RCallArguments {
                l_paren_token: L_PAREN@454..455 "(" [] [],
                items: RArgumentList [
                    RArgument {
                        name_clause: RArgumentNameClause {
                            name: RNullExpression {
                                null_token: NULL_KW@455..462 "NULL" [Newline("\n"), Whitespace("  ")] [],
                            },
                            eq_token: EQUAL@462..464 "=" [Whitespace(" ")] [],
                        },
                        value: missing (optional),
                    },
                    COMMA@464..466 "," [Whitespace(" ")] [],
                    RArgument {
                        name_clause: missing (optional),
                        value: missing (optional),
                    },
                ],
                r_paren_token: R_PAREN@466..468 ")" [Newline("\n")] [],
            },
        },
    ],
    eof_token: EOF@468..468 "" [] [],
}
```

## CST

```
0: R_ROOT@0..468
  0: (empty)
  1: R_EXPRESSION_LIST@0..468
    0: R_CALL@0..4
      0: R_IDENTIFIER@0..2
        0: IDENT@0..2 "fn" [] []
      1: R_CALL_ARGUMENTS@2..4
        0: L_PAREN@2..3 "(" [] []
        1: R_ARGUMENT_LIST@3..3
        2: R_PAREN@3..4 ")" [] []
    1: R_CALL@4..10
      0: R_IDENTIFIER@4..7
        0: IDENT@4..7 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@7..10
        0: L_PAREN@7..8 "(" [] []
        1: R_ARGUMENT_LIST@8..9
          0: R_ARGUMENT@8..9
            0: (empty)
            1: R_IDENTIFIER@8..9
              0: IDENT@8..9 "a" [] []
        2: R_PAREN@9..10 ")" [] []
    2: R_CALL@10..19
      0: R_IDENTIFIER@10..13
        0: IDENT@10..13 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@13..19
        0: L_PAREN@13..14 "(" [] []
        1: R_ARGUMENT_LIST@14..18
          0: R_ARGUMENT@14..15
            0: (empty)
            1: R_IDENTIFIER@14..15
              0: IDENT@14..15 "a" [] []
          1: COMMA@15..16 "," [] []
          2: R_ARGUMENT@16..18
            0: (empty)
            1: R_IDENTIFIER@16..18
              0: IDENT@16..18 "b" [Whitespace(" ")] []
        2: R_PAREN@18..19 ")" [] []
    3: R_CALL@19..27
      0: R_IDENTIFIER@19..22
        0: IDENT@19..22 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@22..27
        0: L_PAREN@22..23 "(" [] []
        1: R_ARGUMENT_LIST@23..26
          0: R_ARGUMENT@23..26
            0: (empty)
            1: R_DOTS@23..26
              0: DOTS@23..26 "..." [] []
        2: R_PAREN@26..27 ")" [] []
    4: R_CALL@27..41
      0: R_IDENTIFIER@27..30
        0: IDENT@27..30 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@30..41
        0: L_PAREN@30..31 "(" [] []
        1: R_ARGUMENT_LIST@31..40
          0: R_ARGUMENT@31..32
            0: (empty)
            1: R_IDENTIFIER@31..32
              0: IDENT@31..32 "a" [] []
          1: COMMA@32..33 "," [] []
          2: R_ARGUMENT@33..37
            0: (empty)
            1: R_DOTS@33..37
              0: DOTS@33..37 "..." [Whitespace(" ")] []
          3: COMMA@37..38 "," [] []
          4: R_ARGUMENT@38..40
            0: (empty)
            1: R_IDENTIFIER@38..40
              0: IDENT@38..40 "b" [Whitespace(" ")] []
        2: R_PAREN@40..41 ")" [] []
    5: R_CALL@41..52
      0: R_IDENTIFIER@41..45
        0: IDENT@41..45 "fn" [Newline("\n"), Newline("\n")] []
      1: R_CALL_ARGUMENTS@45..52
        0: L_PAREN@45..46 "(" [] []
        1: R_ARGUMENT_LIST@46..51
          0: R_ARGUMENT@46..51
            0: R_ARGUMENT_NAME_CLAUSE@46..49
              0: R_IDENTIFIER@46..47
                0: IDENT@46..47 "a" [] []
              1: EQUAL@47..49 "=" [Whitespace(" ")] []
            1: R_DOUBLE_VALUE@49..51
              0: R_DOUBLE_LITERAL@49..51 "1" [Whitespace(" ")] []
        2: R_PAREN@51..52 ")" [] []
    6: R_CALL@52..61
      0: R_IDENTIFIER@52..55
        0: IDENT@52..55 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@55..61
        0: L_PAREN@55..56 "(" [] []
        1: R_ARGUMENT_LIST@56..59
          0: R_ARGUMENT@56..59
            0: R_ARGUMENT_NAME_CLAUSE@56..59
              0: R_IDENTIFIER@56..57
                0: IDENT@56..57 "a" [] []
              1: EQUAL@57..59 "=" [Whitespace(" ")] []
            1: (empty)
        2: R_PAREN@59..61 ")" [Whitespace(" ")] []
    7: R_CALL@61..79
      0: R_IDENTIFIER@61..65
        0: IDENT@61..65 "fn" [Newline("\n"), Newline("\n")] []
      1: R_CALL_ARGUMENTS@65..79
        0: L_PAREN@65..66 "(" [] []
        1: R_ARGUMENT_LIST@66..78
          0: R_ARGUMENT@66..71
            0: R_ARGUMENT_NAME_CLAUSE@66..69
              0: R_IDENTIFIER@66..67
                0: IDENT@66..67 "a" [] []
              1: EQUAL@67..69 "=" [Whitespace(" ")] []
            1: R_DOUBLE_VALUE@69..71
              0: R_DOUBLE_LITERAL@69..71 "1" [Whitespace(" ")] []
          1: COMMA@71..72 "," [] []
          2: R_ARGUMENT@72..78
            0: R_ARGUMENT_NAME_CLAUSE@72..76
              0: R_IDENTIFIER@72..74
                0: IDENT@72..74 "b" [Whitespace(" ")] []
              1: EQUAL@74..76 "=" [Whitespace(" ")] []
            1: R_DOUBLE_VALUE@76..78
              0: R_DOUBLE_LITERAL@76..78 "2" [Whitespace(" ")] []
        2: R_PAREN@78..79 ")" [] []
    8: R_CALL@79..95
      0: R_IDENTIFIER@79..82
        0: IDENT@79..82 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@82..95
        0: L_PAREN@82..83 "(" [] []
        1: R_ARGUMENT_LIST@83..94
          0: R_ARGUMENT@83..86
            0: R_ARGUMENT_NAME_CLAUSE@83..86
              0: R_IDENTIFIER@83..84
                0: IDENT@83..84 "a" [] []
              1: EQUAL@84..86 "=" [Whitespace(" ")] []
            1: (empty)
          1: COMMA@86..88 "," [Whitespace(" ")] []
          2: R_ARGUMENT@88..94
            0: R_ARGUMENT_NAME_CLAUSE@88..92
              0: R_IDENTIFIER@88..90
                0: IDENT@88..90 "b" [Whitespace(" ")] []
              1: EQUAL@90..92 "=" [Whitespace(" ")] []
            1: R_DOUBLE_VALUE@92..94
              0: R_DOUBLE_LITERAL@92..94 "2" [Whitespace(" ")] []
        2: R_PAREN@94..95 ")" [] []
    9: R_CALL@95..108
      0: R_IDENTIFIER@95..99
        0: IDENT@95..99 "fn" [Newline("\n"), Newline("\n")] []
      1: R_CALL_ARGUMENTS@99..108
        0: L_PAREN@99..100 "(" [] []
        1: R_ARGUMENT_LIST@100..107
          0: R_ARGUMENT@100..107
            0: R_ARGUMENT_NAME_CLAUSE@100..105
              0: R_DOTS@100..103
                0: DOTS@100..103 "..." [] []
              1: EQUAL@103..105 "=" [Whitespace(" ")] []
            1: R_DOUBLE_VALUE@105..107
              0: R_DOUBLE_LITERAL@105..107 "1" [Whitespace(" ")] []
        2: R_PAREN@107..108 ")" [] []
    10: R_CALL@108..118
      0: R_IDENTIFIER@108..111
        0: IDENT@108..111 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@111..118
        0: L_PAREN@111..112 "(" [] []
        1: R_ARGUMENT_LIST@112..117
          0: R_ARGUMENT@112..117
            0: R_ARGUMENT_NAME_CLAUSE@112..117
              0: R_DOTS@112..115
                0: DOTS@112..115 "..." [] []
              1: EQUAL@115..117 "=" [Whitespace(" ")] []
            1: (empty)
        2: R_PAREN@117..118 ")" [] []
    11: R_CALL@118..131
      0: R_IDENTIFIER@118..122
        0: IDENT@118..122 "fn" [Newline("\n"), Newline("\n")] []
      1: R_CALL_ARGUMENTS@122..131
        0: L_PAREN@122..123 "(" [] []
        1: R_ARGUMENT_LIST@123..130
          0: R_ARGUMENT@123..130
            0: R_ARGUMENT_NAME_CLAUSE@123..128
              0: R_DOT_DOT_I@123..126
                0: DOTDOTI@123..126 "..1" [] []
              1: EQUAL@126..128 "=" [Whitespace(" ")] []
            1: R_DOUBLE_VALUE@128..130
              0: R_DOUBLE_LITERAL@128..130 "2" [Whitespace(" ")] []
        2: R_PAREN@130..131 ")" [] []
    12: R_CALL@131..141
      0: R_IDENTIFIER@131..134
        0: IDENT@131..134 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@134..141
        0: L_PAREN@134..135 "(" [] []
        1: R_ARGUMENT_LIST@135..140
          0: R_ARGUMENT@135..140
            0: R_ARGUMENT_NAME_CLAUSE@135..140
              0: R_DOT_DOT_I@135..138
                0: DOTDOTI@135..138 "..1" [] []
              1: EQUAL@138..140 "=" [Whitespace(" ")] []
            1: (empty)
        2: R_PAREN@140..141 ")" [] []
    13: R_CALL@141..156
      0: R_IDENTIFIER@141..145
        0: IDENT@141..145 "fn" [Newline("\n"), Newline("\n")] []
      1: R_CALL_ARGUMENTS@145..156
        0: L_PAREN@145..146 "(" [] []
        1: R_ARGUMENT_LIST@146..155
          0: R_ARGUMENT@146..155
            0: R_ARGUMENT_NAME_CLAUSE@146..153
              0: R_STRING_VALUE@146..151
                0: R_STRING_LITERAL@146..151 "\"arg\"" [] []
              1: EQUAL@151..153 "=" [Whitespace(" ")] []
            1: R_DOUBLE_VALUE@153..155
              0: R_DOUBLE_LITERAL@153..155 "1" [Whitespace(" ")] []
        2: R_PAREN@155..156 ")" [] []
    14: R_CALL@156..168
      0: R_IDENTIFIER@156..159
        0: IDENT@156..159 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@159..168
        0: L_PAREN@159..160 "(" [] []
        1: R_ARGUMENT_LIST@160..167
          0: R_ARGUMENT@160..167
            0: R_ARGUMENT_NAME_CLAUSE@160..167
              0: R_STRING_VALUE@160..165
                0: R_STRING_LITERAL@160..165 "\"arg\"" [] []
              1: EQUAL@165..167 "=" [Whitespace(" ")] []
            1: (empty)
        2: R_PAREN@167..168 ")" [] []
    15: R_CALL@168..189
      0: R_IDENTIFIER@168..186
        0: IDENT@168..186 "fn" [Newline("\n"), Newline("\n"), Comments("# Comma tests"), Newline("\n")] []
      1: R_CALL_ARGUMENTS@186..189
        0: L_PAREN@186..187 "(" [] []
        1: R_ARGUMENT_LIST@187..188
          0: R_ARGUMENT@187..187
            0: (empty)
            1: (empty)
          1: COMMA@187..188 "," [] []
          2: R_ARGUMENT@188..188
            0: (empty)
            1: (empty)
        2: R_PAREN@188..189 ")" [] []
    16: R_CALL@189..197
      0: R_IDENTIFIER@189..192
        0: IDENT@189..192 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@192..197
        0: L_PAREN@192..193 "(" [] []
        1: R_ARGUMENT_LIST@193..196
          0: R_ARGUMENT@193..193
            0: (empty)
            1: (empty)
          1: COMMA@193..194 "," [] []
          2: R_ARGUMENT@194..194
            0: (empty)
            1: (empty)
          3: COMMA@194..195 "," [] []
          4: R_ARGUMENT@195..195
            0: (empty)
            1: (empty)
          5: COMMA@195..196 "," [] []
          6: R_ARGUMENT@196..196
            0: (empty)
            1: (empty)
        2: R_PAREN@196..197 ")" [] []
    17: R_CALL@197..210
      0: R_IDENTIFIER@197..200
        0: IDENT@197..200 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@200..210
        0: L_PAREN@200..201 "(" [] []
        1: R_ARGUMENT_LIST@201..209
          0: R_ARGUMENT@201..201
            0: (empty)
            1: (empty)
          1: COMMA@201..202 "," [] []
          2: R_ARGUMENT@202..202
            0: (empty)
            1: (empty)
          3: COMMA@202..203 "," [] []
          4: R_ARGUMENT@203..204
            0: (empty)
            1: R_IDENTIFIER@203..204
              0: IDENT@203..204 "a" [] []
          5: COMMA@204..205 "," [] []
          6: R_ARGUMENT@205..205
            0: (empty)
            1: (empty)
          7: COMMA@205..206 "," [] []
          8: R_ARGUMENT@206..207
            0: (empty)
            1: R_IDENTIFIER@206..207
              0: IDENT@206..207 "b" [] []
          9: COMMA@207..208 "," [] []
          10: R_ARGUMENT@208..208
            0: (empty)
            1: (empty)
          11: COMMA@208..209 "," [] []
          12: R_ARGUMENT@209..209
            0: (empty)
            1: (empty)
        2: R_PAREN@209..210 ")" [] []
    18: R_CALL@210..245
      0: R_IDENTIFIER@210..230
        0: IDENT@210..230 "fn" [Newline("\n"), Newline("\n"), Comments("# Comment tests"), Newline("\n")] []
      1: R_CALL_ARGUMENTS@230..245
        0: L_PAREN@230..231 "(" [] []
        1: R_ARGUMENT_LIST@231..231
        2: R_PAREN@231..245 ")" [Newline("\n"), Whitespace("  "), Comments("# comment"), Newline("\n")] []
    19: R_CALL@245..265
      0: R_IDENTIFIER@245..248
        0: IDENT@245..248 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@248..265
        0: L_PAREN@248..249 "(" [] []
        1: R_ARGUMENT_LIST@249..264
          0: R_ARGUMENT@249..249
            0: (empty)
            1: (empty)
          1: COMMA@249..250 "," [] []
          2: R_ARGUMENT@250..250
            0: (empty)
            1: (empty)
          3: COMMA@250..264 "," [Newline("\n"), Whitespace("  "), Comments("# comment"), Newline("\n")] []
          4: R_ARGUMENT@264..264
            0: (empty)
            1: (empty)
        2: R_PAREN@264..265 ")" [] []
    20: R_CALL@265..302
      0: R_IDENTIFIER@265..268
        0: IDENT@265..268 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@268..302
        0: L_PAREN@268..269 "(" [] []
        1: R_ARGUMENT_LIST@269..300
          0: R_ARGUMENT@269..273
            0: (empty)
            1: R_IDENTIFIER@269..273
              0: IDENT@269..273 "a" [Newline("\n"), Whitespace("  ")] []
          1: COMMA@273..285 "," [] [Whitespace(" "), Comments("# comment1")]
          2: R_ARGUMENT@285..300
            0: (empty)
            1: R_IDENTIFIER@285..300
              0: IDENT@285..300 "b" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment2")]
        2: R_PAREN@300..302 ")" [Newline("\n")] []
    21: R_CALL@302..353
      0: R_IDENTIFIER@302..305
        0: IDENT@302..305 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@305..353
        0: L_PAREN@305..306 "(" [] []
        1: R_ARGUMENT_LIST@306..351
          0: R_ARGUMENT@306..351
            0: R_ARGUMENT_NAME_CLAUSE@306..336
              0: R_IDENTIFIER@306..321
                0: IDENT@306..321 "a" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment1")]
              1: EQUAL@321..336 "=" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment2")]
            1: R_DOUBLE_VALUE@336..351
              0: R_DOUBLE_LITERAL@336..351 "1" [Newline("\n"), Whitespace("  ")] [Whitespace(" "), Comments("# comment3")]
        2: R_PAREN@351..353 ")" [Newline("\n")] []
    22: R_CALL@353..368
      0: R_BRACED_EXPRESSIONS@353..361
        0: L_CURLY@353..356 "{" [Newline("\n"), Newline("\n")] []
        1: R_EXPRESSION_LIST@356..360
          0: R_IDENTIFIER@356..360
            0: IDENT@356..360 "expr" [] []
        2: R_CURLY@360..361 "}" [] []
      1: R_CALL_ARGUMENTS@361..368
        0: L_PAREN@361..362 "(" [] []
        1: R_ARGUMENT_LIST@362..367
          0: R_ARGUMENT@362..367
            0: R_ARGUMENT_NAME_CLAUSE@362..365
              0: R_IDENTIFIER@362..363
                0: IDENT@362..363 "a" [] []
              1: EQUAL@363..365 "=" [Whitespace(" ")] []
            1: R_DOUBLE_VALUE@365..367
              0: R_DOUBLE_LITERAL@365..367 "1" [Whitespace(" ")] []
        2: R_PAREN@367..368 ")" [] []
    23: R_CALL@368..435
      0: R_IDENTIFIER@368..421
        0: IDENT@368..421 "fn" [Newline("\n"), Newline("\n"), Comments("# `NULL` argument nam ..."), Newline("\n")] []
      1: R_CALL_ARGUMENTS@421..435
        0: L_PAREN@421..422 "(" [] []
        1: R_ARGUMENT_LIST@422..433
          0: R_ARGUMENT@422..433
            0: R_ARGUMENT_NAME_CLAUSE@422..431
              0: R_NULL_EXPRESSION@422..429
                0: NULL_KW@422..429 "NULL" [Newline("\n"), Whitespace("  ")] []
              1: EQUAL@429..431 "=" [Whitespace(" ")] []
            1: R_DOUBLE_VALUE@431..433
              0: R_DOUBLE_LITERAL@431..433 "1" [Whitespace(" ")] []
        2: R_PAREN@433..435 ")" [Newline("\n")] []
    24: R_CALL@435..451
      0: R_IDENTIFIER@435..438
        0: IDENT@435..438 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@438..451
        0: L_PAREN@438..439 "(" [] []
        1: R_ARGUMENT_LIST@439..449
          0: R_ARGUMENT@439..449
            0: R_ARGUMENT_NAME_CLAUSE@439..449
              0: R_NULL_EXPRESSION@439..446
                0: NULL_KW@439..446 "NULL" [Newline("\n"), Whitespace("  ")] []
              1: EQUAL@446..449 "=" [Whitespace(" ")] [Whitespace(" ")]
            1: (empty)
        2: R_PAREN@449..451 ")" [Newline("\n")] []
    25: R_CALL@451..468
      0: R_IDENTIFIER@451..454
        0: IDENT@451..454 "fn" [Newline("\n")] []
      1: R_CALL_ARGUMENTS@454..468
        0: L_PAREN@454..455 "(" [] []
        1: R_ARGUMENT_LIST@455..466
          0: R_ARGUMENT@455..464
            0: R_ARGUMENT_NAME_CLAUSE@455..464
              0: R_NULL_EXPRESSION@455..462
                0: NULL_KW@455..462 "NULL" [Newline("\n"), Whitespace("  ")] []
              1: EQUAL@462..464 "=" [Whitespace(" ")] []
            1: (empty)
          1: COMMA@464..466 "," [Whitespace(" ")] []
          2: R_ARGUMENT@466..466
            0: (empty)
            1: (empty)
        2: R_PAREN@466..468 ")" [Newline("\n")] []
  2: EOF@468..468 "" [] []

```
