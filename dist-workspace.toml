[workspace]
members = ["cargo:crates/air"]

# Config for 'dist'
[dist]
# The preferred dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.28.0"
# CI backends to support
ci = "github"
# Whether dist should create a Github Release or use an existing draft
create-release = true
# The installers to generate for each app
installers = ["shell", "powershell"]
# The archive format to use for windows builds (defaults .zip)
windows-archive = ".zip"
# The archive format to use for non-windows builds (defaults .tar.xz)
unix-archive = ".tar.gz"
# Target platforms to build apps for (Rust target-triple syntax)
targets = [
    # Mac
    "x86_64-apple-darwin",
    "aarch64-apple-darwin",
    # Windows
    "x86_64-pc-windows-msvc",
    "aarch64-pc-windows-msvc",
    # Linux
    "x86_64-unknown-linux-gnu",
    "aarch64-unknown-linux-gnu",
]
# Tell dist to only build `crates/air` rather than every crate in the workspace,
# which it does by default to be conservative but would include some heavier test-only
# crates that aren't required (including xtask).
precise-builds = true
# Whether to auto-include files like READMEs, LICENSEs, and CHANGELOGs (default true)
auto-includes = false
# Which actions to run on pull requests (use "upload" to force a build in CI for testing)
pr-run-mode = "skip"
# Whether CI should trigger releases with dispatches instead of tag pushes
dispatch-releases = true
# Path that installers should place binaries in
install-path = ["$XDG_BIN_HOME/", "$XDG_DATA_HOME/../bin", "~/.local/bin"]
# Whether to install an updater program
install-updater = false

[dist.github-custom-runners]
# Use ARM Mac runner to build ARM binary (not strictly required, but nice).
# dist uses `macos-13` by default and cross-compiles.
aarch64-apple-darwin = "macos-14"
# Lock Linux to minimum supported Ubuntu version (glibc 2.31).
# For ARM Linux dist actually uses an x86_64 host and uses cargo-zigbuild to cross compile.
x86_64-unknown-linux-gnu = "ubuntu-20.04"
aarch64-unknown-linux-gnu = "ubuntu-20.04"
