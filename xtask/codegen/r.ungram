// R Un-Grammar.
//
// This grammar specifies the structure of R's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //                          -- comment
//   Name =                      -- non-terminal definition
//   'ident'                     -- token (terminal)
//   A B                         -- sequence
//   A | B                       -- alternation
//   A*                          -- zero or more repetition
//   (A (',' A)* ','?)            -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)                -- repetition of node A separated by ',' without a trailing comma
//   A?                          -- zero or one repetition
//   (A)                         -- same as A
//   label:A                     -- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Bogus nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree

// ----------------------------------------------------------------
// Initial

SyntaxElement = SyntaxElement

// ----------------------------------------------------------------
// Bogus

RBogus = SyntaxElement*
RBogusValue = SyntaxElement*
RBogusExpression = SyntaxElement*
RBogusParameter = SyntaxElement*
RBogusArgument = SyntaxElement*

// ----------------------------------------------------------------
// Root

RRoot =
	bom: 'UNICODE_BOM'?
	expressions: RExpressionList
	eof: 'EOF'

// ----------------------------------------------------------------
// Binary

RBinaryExpression =
	left: AnyRExpression
    operator: (
		'+'
	)
	right: AnyRExpression

// ----------------------------------------------------------------
// Function

RFunctionDefinition =
	name: ('function' | 'backslash')
	parameters: RParameters
	body: AnyRExpression

RParameters =
	'('
	items: RParameterList
	')'

RParameterList = (AnyRParameter (',' AnyRParameter)*)

AnyRParameter =
	RIdentifierParameter
	| RDotsParameter
	| RDefaultParameter
	| RBogusParameter

RIdentifierParameter = name: 'ident'

RDotsParameter = name: '...'

RDefaultParameter =
	name: 'ident'
	'='
	default: AnyRExpression?

// ----------------------------------------------------------------
// If statement

RIfStatement =
	'if'
	'('
	condition: AnyRExpression
	')'
	consequence: AnyRExpression
	else_clause: RElseClause?

RElseClause =
	'else'
	alternative: AnyRExpression

// ----------------------------------------------------------------
// For statement

RForStatement =
	'for'
	'('
	variable: RIdentifier
	'in'
	sequence: AnyRExpression
	')'
	body: AnyRExpression

// ----------------------------------------------------------------
// While statement

RWhileStatement =
	'while'
	'('
	condition: AnyRExpression
	')'
	body: AnyRExpression

// ----------------------------------------------------------------
// Repeat statement

RRepeatStatement =
	'repeat'
	body: AnyRExpression

// ----------------------------------------------------------------
// Braced expressions

RBracedExpressions =
	'{'
	expressions: RExpressionList
	'}'

// ----------------------------------------------------------------
// Call

RCall =
	function: AnyRExpression
	arguments: RCallArguments

RCallArguments =
	'('
	items: RArgumentList
	')'

// We want to allow:
// - Any number of sequential commas
// - But two arguments must be separated by at least 1 comma
//
// The way we implement this is by physically representing
// empty "holes" created by commas by a zero width `RHoleArgument`
// node. This is similar to `JsArrayHole`, and allows us to use
// standard repetition syntax while still enforcing the
// above rules. It's quite elegant, really.
//
// # Allowed
// fn()
// fn(,)
// fn(,,)
// fn(a)
// fn(a, b)
// fn(,,a,,b,,)
// fn(a, # comment_between_commas
// ,)
//
// # Not allowed
// fn(a b)
RArgumentList = (AnyRArgument (',' AnyRArgument)*)

AnyRArgument =
	RNamedArgument
	| RUnnamedArgument
	| RDotsArgument
	| RHoleArgument
	| RBogusArgument

RNamedArgument =
	name: AnyRArgumentName
	'='
	value: AnyRExpression?

RUnnamedArgument =
	value: AnyRExpression

RDotsArgument = value: '...'

RHoleArgument = hole: ''?

AnyRArgumentName =
	RIdentifier
	| RStringValue
	| RDots

// ----------------------------------------------------------------
// Expression

RExpressionList = AnyRExpression*

AnyRExpression =
	AnyRValue
	| RIdentifier
	| RBinaryExpression
	| RFunctionDefinition
	| RIfStatement
	| RForStatement
	| RWhileStatement
	| RRepeatStatement
	| RBracedExpressions
	| RCall
	| RBogusExpression

// ----------------------------------------------------------------
// Value

AnyRValue =
	RIntegerValue
	| RDoubleValue
	| RComplexValue
	| RStringValue
	| RLogicalValue
	| RNullValue
	| RBogusValue

RIntegerValue = value: 'r_integer_literal'
RDoubleValue = value: 'r_double_literal'
RComplexValue = value: 'r_complex_literal'
RStringValue = value: 'r_string_literal'
RLogicalValue = value: 'r_logical_literal'
RNullValue = value: 'r_null_literal'

// ----------------------------------------------------------------
// Identifier

RIdentifier = name: 'ident'

RDots = value: '...'
