[
  {
    "objectID": "configuration.html",
    "href": "configuration.html",
    "title": "Configuration",
    "section": "",
    "text": "Air can be configured using a TOML file named air.toml. Air is purposefully minimally configurable, with the main configuration points being related to line width and indent style.",
    "crumbs": [
      "Configuration"
    ]
  },
  {
    "objectID": "configuration.html#example-configuration",
    "href": "configuration.html#example-configuration",
    "title": "Configuration",
    "section": "Example configuration",
    "text": "Example configuration\nBelow is a complete air.toml file showing all available options set to their default values:\n[format]\nline-width = 80\nindent-width = 2\nindent-style = \"space\"\nline-ending = \"auto\"\npersistent-line-breaks = true",
    "crumbs": [
      "Configuration"
    ]
  },
  {
    "objectID": "configuration.html#configuration-recommendations",
    "href": "configuration.html#configuration-recommendations",
    "title": "Configuration",
    "section": "Configuration recommendations",
    "text": "Configuration recommendations\nFor collaborative projects, we recommend creating an air.toml and placing it at your project root even if you plan to use the default Air settings. This has a number of benefits:\n\nIt stops Air from using user level editor settings. When an air.toml is not present, Air respects some user level editor settings, such as editor.tabWidth in VS Code or Positron. The presence of an air.toml (even an empty one) disables this, instead pulling all settings from the configuration file. This ensures that settings are the same across team members, code editors, and in CI.\nIt stops configuration discovery from extending outside your project. Without an air.toml at the project root, Air might discover your local ~/packages/air.toml as the configuration file to use for the ~/packages/dplyr project. By adding ~/packages/dplyr/air.toml, you prevent configuration discovery from looking “above” ~/packages/dplyr, again ensuring consistent settings across team members.\nIt serves as a signal to others that your project is using Air.\n\nIf you do plan to just use the defaults, the air.toml can be completely empty. The important thing is that it exists.\nIf you’re happy with Air’s defaults (or your IDE settings, see section on synchronization) and don’t plan for your project to ever leave your computer, you likely don’t need an air.toml.",
    "crumbs": [
      "Configuration"
    ]
  },
  {
    "objectID": "configuration.html#configuration-discovery",
    "href": "configuration.html#configuration-discovery",
    "title": "Configuration",
    "section": "Configuration discovery",
    "text": "Configuration discovery\nThe ideal place to put an air.toml file is at your project root. For example, note the placement of air.toml in this minimal dplyr project:\n~/packages/dplyr\n├── air.toml\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n├── src\n├── tests\n└── vignettes\nIf you run air format with a working directory of ~/packages/dplyr or open your IDE in the dplyr project, then Air will find and use that TOML file.\nAir also supports walking up the directory tree from the project root. For example, if you ran air format from within ~/packages/dplyr/R, then Air would look “up” one directory and would find and use ~/packages/dplyr/air.toml.",
    "crumbs": [
      "Configuration"
    ]
  },
  {
    "objectID": "configuration.html#settings-synchronization",
    "href": "configuration.html#settings-synchronization",
    "title": "Configuration",
    "section": "Settings synchronization",
    "text": "Settings synchronization\nIn IDEs that support synchronization (VS Code and Positron currently), Air does its best to ensure that the formatter and the IDE are in agreement. This is supported by two mechanisms:\n\nIn projects that don’t have an air.toml file, IDE settings are sent to Air. This ensures that Air will use the same indentation style and width that is configured in the IDE.\nIn projects that do have an air.toml file, the Air settings are sent to the IDE. This ensures that the IDE will use the same indentation style and width that Air uses.\n\nThe goal of this synchronization mechanism is for the IDE to work in lockstep with the Air formatter.",
    "crumbs": [
      "Configuration"
    ]
  },
  {
    "objectID": "configuration.html#dotfiles",
    "href": "configuration.html#dotfiles",
    "title": "Configuration",
    "section": "Dotfiles",
    "text": "Dotfiles\nAir supports both air.toml and .air.toml. If both are present in the same directory, then air.toml is preferred (but we don’t recommend this).",
    "crumbs": [
      "Configuration"
    ]
  },
  {
    "objectID": "configuration.html#format-options",
    "href": "configuration.html#format-options",
    "title": "Configuration",
    "section": "Format options",
    "text": "Format options\nAll formatting options are specified under the [format] table.\n\nline-width\nThe preferred maximum line length.\nAn integer value between 1 and 320, with a default of 80.\nWhile the formatter will attempt to format lines such that they remain within the line-width, it isn’t a hard upper bound, and formatted lines may exceed the line-width.\n\n\nindent-width\nThe number of spaces per indentation level.\nAn integer value between 1 and 24, with a default of 2.\nThis option changes the number of spaces the formatter inserts when using indent-style = \"space\". It also represents the width of a tab when indent-style = \"tab\" for the purposes of computing the line-width.\n\n\nindent-style\nWhether to use spaces or tabs for indentation.\nOne of the following values, with a default of \"space\":\n\n\"space\": Use spaces for indentation.\n\"tab\": Use tabs for indentation.\n\nAir defaults to spaces due to the overwhelming amount of existing R code written in this style, but consider using tabs for new projects to improve accessibility. See indent-width to configure the number of spaces per indentation and the tab width.\n\n\nline-ending\nThe character air uses at the end of a line.\nOne of the following values, with a default of \"auto\":\n\n\"auto\": The newline style is detected automatically on a file per file basis. Files with mixed line endings will be converted to the first detected line ending. Defaults to \\n for files that contain no line endings.\n\"lf\": Line endings will be converted to \\n. The typical line ending on Unix.\n\"crlf\": Line endings will be converted to \\r\\n. The typical line ending on Windows.\n\"native\": Line endings will be converted to \\n on Unix and \\r\\n on Windows.\n\n\n\npersistent-line-breaks\nWhether or not persistent line breaks are allowed.\nEither true to respect persistent line breaks, or false to ignore them, with a default of true.\nAir respects a small set of persistent line breaks as an indication that certain function calls or function signatures should be left expanded. For example, the following list could be flattened to one line and would still fit within a line-width of 80, however, it remains expanded due to the persistent line break between the opening ( and the first argument, apple.\ndictionary &lt;- list(\n  apple = 0.75,\n  banana = 0.25,\n  cherry = 0.50\n)\nSimilarly, this function signature could also be flattened, but is not, due to the persistent line break between the opening ( and the first parameter, ....\ncase_when &lt;- function(\n  ...,\n  .default = NULL,\n  .ptype = NULL,\n  .size = NULL\n) {\n  body\n}\nTo request flattening in these cases, just remove the persistent line break. For example:\n# If you started here,\ndictionary &lt;- list(\n  apple = 0.75,\n  banana = 0.25,\n  cherry = 0.50\n)\n\n# then do this, and run air,\ndictionary &lt;- list(apple = 0.75,\n  banana = 0.25,\n  cherry = 0.50\n)\n\n# to get this.\ndictionary &lt;- list(apple = 0.75, banana = 0.25, cherry = 0.50)\nAlternatively, use a tool such as codegrip bound to a keyboard shortcut to flatten the code, and Air will keep it flattened as long as it fits within the line-width.\nIt may be preferable to ignore persistent line breaks if you prefer that line-width should be the only value that influences line breaks.",
    "crumbs": [
      "Configuration"
    ]
  },
  {
    "objectID": "formatter.html",
    "href": "formatter.html",
    "title": "Formatter",
    "section": "",
    "text": "TODO",
    "crumbs": [
      "Formatter"
    ]
  },
  {
    "objectID": "editors.html",
    "href": "editors.html",
    "title": "Editor setup",
    "section": "",
    "text": "Air provides excellent support for code editors that support the Language Server Protocol. Many do, including Positron, VS Code, and Zed. Air also provides some support for code editors that allow for external formatters, such as RStudio.",
    "crumbs": [
      "Editors"
    ]
  },
  {
    "objectID": "editors.html#format-on-save",
    "href": "editors.html#format-on-save",
    "title": "Editor setup",
    "section": "Format on save",
    "text": "Format on save\nOnce you have the extension installed, turn on Format on Save for R documents by opening your settings.json and adding:\n{\n    \"[r]\": {\n        \"editor.formatOnSave\": true\n    }\n}\nYou may also want to set Air as the default formatter for R documents if you have multiple R formatters installed. You can set that with \"editor.defaultFormatter\": \"Posit.air\".\nYou should now be able to simply open an R document, save it, and have the entire document formatted by Air. You can also explicitly call the command Format Document if you’d like to control this manually.",
    "crumbs": [
      "Editors"
    ]
  },
  {
    "objectID": "editors.html#format-selection",
    "href": "editors.html#format-selection",
    "title": "Editor setup",
    "section": "Format selection",
    "text": "Format selection\nTo format a selection of code, highlight it with your cursor and run the command Format Selection. Formatting a selection may expand that selection to find the nearest complete fragment of code that is formattable.",
    "crumbs": [
      "Editors"
    ]
  },
  {
    "objectID": "editors.html#format-on-save-1",
    "href": "editors.html#format-on-save-1",
    "title": "Editor setup",
    "section": "Format on save",
    "text": "Format on save\nAfter you’ve set Air as an external formatter, you can either tell RStudio to format all documents on save, or set this on a per document basis.\nTo format all documents on save, open Tools -&gt; Global Options -&gt; Code -&gt; Saving and check Reformat documents on save.\n\n\n\n\n\nTo format individual documents on save, open the file specific settings and check Reformat Document on Save.",
    "crumbs": [
      "Editors"
    ]
  },
  {
    "objectID": "editors.html#format-on-save-2",
    "href": "editors.html#format-on-save-2",
    "title": "Editor setup",
    "section": "Format on save",
    "text": "Format on save\nTo format all R code cells on save, set this in your settings.json:\n{\n    \"[quarto]\": {\n        \"editor.formatOnSave\": true\n    },\n    \"[r]\": {\n        \"editor.formatOnSave\": true\n    }\n}",
    "crumbs": [
      "Editors"
    ]
  },
  {
    "objectID": "editors.html#format-cell",
    "href": "editors.html#format-cell",
    "title": "Editor setup",
    "section": "Format cell",
    "text": "Format cell\nWhen inside an R cell in a Quarto document, use the chorded key combination Cmd+K Cmd+F or the command Quarto: Format Cell to format a single cell.",
    "crumbs": [
      "Editors"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Overview",
    "section": "",
    "text": "Air is an R formatter and language server, written in Rust.\n\nIntegrates with your favorite editor with support for\n\nFormat on save\nFormat selection\n\nUsable from the command line with support for\n\nFormatting individual files\nRecursively formatting entire directories\n--check mode, suitable for a git pre-commit hook or a GitHub Actions workflow\n\n\nIf you’d like to use Air from the command line, read our installation guide. If you’d like to use Air inside a code editor, read our editors guide.",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installing Air",
    "section": "",
    "text": "If you’d like to use Air at the command line, you can use one of our standalone installers.\n\nTo install Air as a command line tool:\nOn macOS and Linux:\ncurl -LsSf https://github.com/posit-dev/air/releases/latest/download/air-installer.sh | sh\nOn Windows:\npowershell -c \"irm https://github.com/posit-dev/air/releases/latest/download/air-installer.ps1 | iex\"\nFor a specific version:\ncurl -LsSf https://github.com/posit-dev/air/releases/download/0.1.1/air-installer.sh | sh\npowershell -c \"irm https://github.com/posit-dev/air/releases/download/0.1.1/air-installer.ps1 | iex\"\nThe installer scripts will automatically add Air to your PATH. The very first time you install Air, for the PATH modifications to be applied you’ll need to restart your terminal.\nOn Windows, the first time you install Air it requires a full system restart for the PATH modification to take effect. We are working on improving this.",
    "crumbs": [
      "Installation"
    ]
  }
]